searchState.loadedDescShard("linera_chain", 0, "This module manages the state of a Linera chain, including …\nA view accessing the state of a chain.\nReturns true if there are no more outgoing messages in …\nReturns the <code>ChainId</code> of the chain this <code>ChainStateView</code> …\nChannels able to multicast messages to subscribers.\nHashes of all certified blocks for this sender. This ends …\nInvariant for the states of active chains.\nExecutes a block: first the incoming messages, then the …\nExecution state, including system and user applications.\nHash of the execution state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMailboxes used to receive messages indexed by their origin.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvariant for the states of active chains.\nReturns whether this chain has been closed.\nChain manager\nConsensus state.\nNumber of outgoing messages in flight for each block …\nMailboxes used to send messages, indexed by their target.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nAttempts to process a new <code>bundle</code> of messages from the …\nThe number of <code>received_log</code> entries we have synchronized, …\nSender chain and height of all certified blocks known as a …\nRemoves the incoming message bundles in the block from the …\nUnskippable bundles that have been removed but are still …\nTest utilities\nBlock-chaining state.\nA queue of unskippable bundles, with the timestamp when we …\nUpdates the <code>received_log</code> trackers.\nVerifies that this chain is up-to-date and all the …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nExecute the incoming message.\nA block containing operations to apply on a given chain, …\nThe messages and the state hash resulting from a <code>Block</code>’s …\nAn authenticated proposal for a new block.\nA chain ID with a block height.\nThe message is a channel broadcast.\nA channel name together with its application ID.\nThe message is a direct message.\nAn event recorded in an executed block.\nExecute an operation.\nA <code>Block</code>, together with the outcome from its execution.\nA bundle of cross-chain messages.\nThe hash and chain ID of a <code>CertificateValue</code>.\nA vote on a statement from a validator, represented as a …\nThe origin of a message coming from a particular chain. …\nWhat to do with a message picked from the inbox.\nA set of messages from a single block, for a single …\nThe origin of a message, relative to a particular …\nA posted message together with routing information.\nA message together with kind, authentication and grant …\nThe data a block proposer signs.\nReceive a bundle of incoming messages.\nDo not execute the incoming message.\nThe target of a message, relative to a particular …\nA transaction in a block: incoming messages or an …\nA vote on a statement from a validator.\nWhat to do with the message.\nTries to append a signature to a (partial) certificate. …\nThe application owning the channel.\nThe user signing for the operations in the block and …\nThe user authentication carried by the message, if any.\nThe user authentication carried by the message, if any.\nThe proposed block.\nThe messages to be delivered to the inbox identified by …\nThe confirmed block certificate hash.\nThe chain to which this block belongs.\nVerifies the signature in the vote.\nThe destination of the message.\nThe number identifying the current configuration.\nThe list of events produced by each transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether this bundle must be added to the inbox.\nA grant to pay for the message execution.\nA grant to pay for the message execution.\nReturns whether this message is sent via the given medium …\nReturns whether the block contains only rejected incoming …\nThe block height.\nThe block height.\nA selection of incoming messages to be executed first. …\nReturns an iterator over all incoming <code>PostedMessage</code>s in …\nThe index of the message in the sending block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the posted message, i.e. the outgoing message …\nThe event key.\nThe kind of message being sent.\nThe kind of message being sent.\nReturns the vote, with a <code>LiteValue</code> instead of the full …\nThe medium.\nThe medium.\nThe message itself.\nThe message itself.\nReturns the bundles of messages sent via the given medium …\nReturns the number of incoming messages.\nReturns the message ID belonging to the <code>index</code>th outgoing …\nReturns the <code>message_index</code>th outgoing message created by …\nThe relevant messages.\nThe list of outgoing messages for each transaction.\nReturns an iterator over all posted messages in this …\nThe name of the channel.\nStarts aggregating signatures for the given value into a …\nUse signing key to create a signed object.\nUses the signing key to create a signed object.\nThe operations to execute.\nThe record of oracle responses for each transaction.\nThe origin of the messages (chain and channel if any).\nIf this is a retry from an earlier round, the execution …\nCertified hash (see <code>Certificate</code> below) of the previous …\nReturns all the published blob IDs in this block’s …\nRearranges the messages in the bundle so that the first …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe chain ID of the recipient.\nWhere to send a refund for the unused part of the grant …\nWhere to send a refund for the unused part of the grant …\nThe consensus round in which this proposal is made.\nThe chain ID of the sender.\nIf the block’s first message is <code>OpenChain</code>, returns the …\nThe hash of the chain’s execution state after this block.\nThe ID of the stream this event belongs to.\nThe timestamp when this block was created. This must be …\nThe block’s timestamp.\nReturns the ID of the <code>index</code>-th message sent by the block …\nThe index of the transaction in the block that is sending …\nReturns an iterator over all transactions, by index.\nReturns the value this vote is for.\nThe payload data.\nReturns the full vote, with the value, if it matches.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe state of the certification process for a chain’s …\nChain manager information that is included in <code>ChainInfo</code> …\nThe result of verifying a (valid) query.\nAdds requested certificate values and proposals to the …\nReturns whether a proposal with this content was already …\nReturns whether the <code>identity</code> is allowed to propose a block …\nVerifies the safety of a proposed block with respect to …\nVerifies that we can vote to confirm a validated block.\nReturns the most recent confirmed vote we cast.\nLatest vote we cast to confirm a block.\nSigns a vote to confirm the validated block.\nSigns a vote to validate the proposed block.\nThe lowest round where we can still vote to validate or …\nThe current round, i.e. the lowest round where we can …\nThe probability distribution for choosing a round leader.\nThe probability distribution for choosing a fallback round …\nThe owners that take over in fallback mode.\nReturns the most recent fallback vote we cast.\nFallback vote we cast.\nFallback vote we cast.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUpdates the round number and timer if the timeout …\nReturns whether there is a locked block in the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current leader, who is allowed to propose the next …\nLatest validated proposal that we have voted to confirm …\nThese are blobs published or read by the locked block.\nThese are blobs belonging to the locked block.\nThe public keys, weights and types of the chain’s owners.\nThe configuration of the chain’s owners.\nLatest vote we cast (either to validate or to confirm a …\nHighest-round authenticated block that we have received …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe value we voted for, if requested.\nLatest validated proposal that we have voted to confirm …\nLatest authenticated block that we have received, if …\nThe value we voted for, if requested.\nReplaces <code>self</code> with a new chain manager.\nThe time after which we are ready to sign a timeout …\nThe timestamp when the current round times out.\nThe seed for the pseudo-random number generator that …\nLatest leader timeout certificate we have received.\nLatest timeout certificate we have seen.\nReturns the most recent timeout vote we cast.\nLatest timeout vote we cast.\nLatest timeout vote we cast.\nReturns the most recent validated vote we cast.\nLatest vote we cast to validate a block.\nReturns the public key of the block proposal’s signer, …\nSigns a <code>Timeout</code> certificate to switch to fallback mode.\nChecks if the current round has timed out, and signs a …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA helper trait to simplify constructing blocks for tests.\nHelper trait to simplify constructing messages for tests.\nReturns a certificate for a committee consisting only of …\nReturns a block proposal in the first round in a default …\nReturns a block proposal without any hashed certificate …\nCreates a new child of the given block, with the same …\nCreates a block at height 0 for a new chain.\nReturns the block with the given authenticated signer.\nReturns the block with the specified epoch.\nReturns the block with the given message appended at the …\nReturns the block with the given operation appended at the …\nReturns the block with a simple transfer operation …\nReturns the block with the specified timestamp.\nReturns the block with a transfer operation appended at …\nEnum wrapping all types of certificates that can be …\nCertificate for <code>ConfirmedBlock</code>.\nWrapper around an <code>ExecutedBlock</code> that has been confirmed.\nFailure to convert to <code>ConfirmedBlock</code> certificate.\nCertificate for a <code>ConfirmedBlock</code> instance. A confirmed …\nFailure to convert a <code>Certificate</code> into one of the expected …\nGeneric type representing a certificate for <code>value</code> of type <code>T</code>…\nA certified statement from the committee, without the …\nFailure to convert to <code>Timeout</code> certificate.\nCertificate for <code>Timeout</code>.\nCertificate for a <code>Timeout</code> instance. A timeout certificate …\nCertificate for <code>ValidatedBlock</code>.\nWrapper around an <code>ExecutedBlock</code> that has been validated.\nFailure to convert to <code>ValidatedBlock</code> certificate.\nCertificate for a <code>ValidatedBlock</code>` instance. A validated …\nAdds a signature to the certificate’s list of signatures …\nVerifies the certificate.\nVerifies the certificate.\nReturns a <code>LiteCertificate</code> that owns the list of signatures.\nReturns a reference to the <code>ExecutedBlock</code> contained in this …\nReturns a reference to the <code>ExecutedBlock</code> contained in this …\nReturns reference to the <code>ExecutedBlock</code> contained in this …\nReturns reference to the <code>ExecutedBlock</code> contained in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether this value contains the message with the …\nReturns the certified value’s hash.\nReturns reference to the value contained in this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>ValidatedBlock</code>, returning the <code>ExecutedBlock</code> …\nConsumes this <code>ConfirmedBlock</code>, returning the <code>ExecutedBlock</code> …\nConsumes this certificate, returning the value it contains.\nConsumes this certificate, returning the value it contains.\nReturns whether the validator is among the signatories of …\nReturns the bundles of messages sent via the given medium …\nCreates a new <code>ValidatedBlock</code> from an <code>ExecutedBlock</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe round in which the value was certified.\nSignatures on the value.\nCreates a <code>LiteCertificate</code> from a list of votes, without …\nReturns a reference to the <code>Hashed</code> value contained in this …\nHash and chain ID of the certified value (used as key for …\nCreates a <code>HashedCertificateValue</code> checking that this is the …\nCreates a <code>HashedCertificateValue</code> without checking that …\nReturns the <code>GenericCertificate</code> with the specified value, …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")