searchState.loadedDescShard("linera_core", 0, "This module defines the core Linera protocol.\nA worker to handle a single chain.\nAn extension trait to allow determining at compile time …\nThe actor worker type.\nConfiguration parameters for the <code>ChainWorkerState</code>.\nA request for the <code>ChainWorkerActor</code>.\nThe state of the chain worker.\nHandle cross-chain request to confirm that the recipient …\nDescribe an application.\nSearch for a bundle in one of the chain’s inboxes.\nRequest a read-only view of the <code>ChainStateView</code>.\nHandle a proposal for the next block on this chain.\nHandle a <code>ChainInfoQuery</code>.\nProcess a confirmed block (a commit).\nProcess a cross-chain update.\nProcess a leader timeout issued for this multi-owner chain.\nProcess a validated block issued for this multi-owner …\nQuery an application’s state.\nReads the certificate for a requested <code>BlockHeight</code>.\nExecute a block but discard any changes to the chain state.\nUpdate the received certificate trackers to at least the …\nReturns true if there are no more outgoing messages in …\nWhether inactive chains are allowed in storage.\nWhether new messages from deprecated epochs are allowed.\nReturns the <code>ChainId</code> of the chain handled by this worker.\nReturns the current <code>QueryContext</code> for the current chain …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlocks with a timestamp this far in the future will still …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets a reference to the <code>KeyPair</code>, if available.\nThe signature key pair of the validator. The key may be …\nSpawns a new task to run the <code>ChainWorkerActor</code>, returning …\nCreates a new <code>ChainWorkerState</code> using the provided <code>storage</code> …\nWhether the user application services should be long-lived.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRuns the worker until there are no more incoming requests.\nUpdates the received certificate trackers to at least the …\nConfigures the <code>key_pair</code> in this <code>ChainWorkerConfig</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrapper for <code>AbortHandle</code> that aborts when its dropped.\nAutomatically accept all incoming messages. Reject them …\nClient to operate a chain by interacting with validators …\nError type for <code>ChainClient</code>.\nA builder that creates <code>ChainClient</code>s which share the cache …\nDon’t include any messages in blocks, and don’t make …\nPolicies for automatically handling incoming messages.\nAutomatically reject tracked messages, ignore or skip …\nAdds pending blobs\nGets the hash of the latest known block.\nBurns tokens.\nGets the ID of the associated chain.\nObtains the basic <code>ChainInfo</code> data for the local chain.\nObtains the basic <code>ChainInfo</code> data for the local chain, with …\nObtains a <code>ChainStateView</code> for this client’s chain.\nChanges the application permissions configuration on this …\nChanges the ownership of this chain. Fails if it would …\nClaims money in a remote chain.\nClears the information on any operation that previously …\nCloses the chain (and loses everything in it!!). Returns …\nCreates an application by instantiating some bytecode.\nCreates an application by instantiating some bytecode.\nCreates a compressed Contract, Service and bytecode.\nCreates a new <code>ChainClient</code>.\nWhether to block on cross-chain message delivery.\nDownloads and processes all certificates up to (excluding) …\nObtains the current epoch of the given chain as well as …\nObtains the epochs of the committees trusted by the local …\nExecutes an operation.\nExecutes a list of operations.\nDeprecates all the configurations of voting rights but the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nObtains the identity of the current owner of the chain. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtains the key pair associated to the current identity.\nSpawns a task that listens to notifications about the …\nReads the local balance of the chain account.\nObtains the committee for the current epoch of the local …\nReturns a reference to the <code>LocalNodeClient</code> of the client.\nReads the local balance of a user account.\nMaximum number of pending message bundles processed at a …\nThe policy for automatically handling incoming messages.\nCreates a new <code>Client</code> with a new cache and notifiers.\nGets the next block height.\nOpens a new chain with a derived UID.\nGets the per-<code>ChainClient</code> options.\nGets a guarded reference to the set of pending blobs.\nGets a guarded reference to the next pending block.\nPrepares the chain for the next operation, i.e. makes sure …\nSynchronizes the chain with the validators and creates …\nCreates blocks without any operations to process all …\nProcesses the last pending block\nObtains the public key associated to the current identity.\nPublishes some bytecode.\nPublishes some bytecode.\nPublishes some data blob.\nPublishes some data blobs.\nQueries an application.\nObtains the local balance of the chain account after …\nObtains the local balance of an account after staging the …\nQueries a system application.\nQueries a user application.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nVerify if a data blob is readable from storage.\nProcesses confirmed operation for which this chain is a …\nProcesses a confirmed block for which this chain is a …\nDownloads and processes a confirmed block certificate that …\nDownloads and processes confirmed block certificates that …\nRequests a <code>RegisterApplications</code> message from another chain …\nRequests a leader timeout vote from all validators. If a …\nHandles any cross-chain requests for any pending outgoing …\nRotates the key of the chain.\nAdds another owner to the chain, and turns existing super …\nCreates a new committee and starts using it (admin chains …\nGets a shared reference to the chain’s state.\nReturns the storage client used by this client’s local …\nReturns the storage client used by this client’s local …\nSubscribes to notifications from this client’s chain.\nStarts listening to the admin chain for new committees. …\nDownloads and processes any certificates we are missing …\nAttempts to synchronize chains that have sent us messages …\nGets the earliest possible timestamp for the next block.\nAdds a chain to the set of chains tracked by the local …\nSends money.\nTransfers ownership of the chain to a single super owner.\nSends tokens to a chain.\nSends money to a chain. Do not check balance. (This may …\nTries to process all the certificates, requesting any …\nStops listening to the admin chain for new committees. …\nAttempts to update all validators about the local chain.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA range of block heights as used in ChainInfoQuery.\nRequest information about a chain.\nThe response to an <code>ChainInfoQuery</code>\nThe outcome of trying to commit a list of operations to …\nThe operations were committed successfully.\nAcknowledge the height of the highest confirmed blocks …\nAn internal request between chains within a validator.\nCommunicate a number of confirmed blocks from the sender …\nWe are not the round leader and cannot do anything. Try …\nThe last block hash, if any.\nThe current balance.\nThe chain ID.\nThe chain ID.\nThe current number of received certificates (useful for …\nThe chain description.\nThe number identifying the current configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the cross-chain request has messages lower …\nReturns the highest block height in the range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the committee in the latest epoch.\nOptional limit on the number of elements.\nThe state of the chain authentication.\nCreates a range starting at the specified block height and …\nThe height after the latest block in the chain.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nQuery the current committees.\nInclude a vote to switch to fallback mode, if appropriate.\nInclude a timeout vote for the current round, if …\nQuery values from the chain manager, not just votes.\nRequest the balance of a given <code>AccountOwner</code>.\nQuery the received messages that are waiting be picked in …\nQuery new certificate sender chain IDs and block heights …\nQuery a range of certificate hashes sent from the chain.\nThe current committees.\nThe requested owner balance, if any.\nThe received messages that are waiting be picked in the …\nThe response to …\nThe response to <code>request_sent_certificate_hashes_in_range</code>\nReturns the <code>RoundTimeout</code> value for the current round, or …\nSigns the <code>ChainInfo</code> stored inside this <code>ChainInfoResponse</code> …\nCreates a range containing only the single specified block …\nStarting point\nThe hash of the current execution state.\nWhere to send the cross-chain request.\nOptionally test that the block height is the one expected.\nThe earliest possible timestamp for the next block.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nAn owned permission to abort a spawned task, without …\nAn extension trait for the <code>JoinSet</code> type.\nA handle to a task spawned with <code>JoinSetExt</code>.\nAborts the task.\nAbort the task associated with the handle.\nAwaits all tasks spawned in this <code>JoinSet</code>.\nReturns a cloned <code>AbortHandle</code> that can be used to remotely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the task associated with this <code>AbortHandle</code> has …\nReturns <code>true</code> if the task is still running.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReaps tasks that have finished.\nSpawns a <code>future</code> task on this <code>JoinSet</code> using <code>JoinSet::spawn</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA local node with a single worker, typically used by …\nA client to a local node.\nError type for the operations on a local node.\nObtains the certificate containing the specified message.\nReturns a read-only view of the <code>ChainStateView</code> of a chain …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks for the specified blobs in the local chain manager’…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a list of chain IDs, returns a map that assigns to …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads blobs from storage.\nHandles any pending local cross-chain requests.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWhether to wait for the delivery of outgoing cross-chain …\nError type for node queries.\nA pinned <code>Stream</code> of Notifications.\nHow to communicate with a validator node.\nTurn an address into a validator node.\nReturns the hash of the <code>Certificate</code> that last used a blob.\nRequests a batch of certificates from the validator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the network’s genesis config hash.\nGets the version info for this validator node.\nProposes a new block.\nHandles information queries for this chain.\nProcesses a confirmed certificate.\nProcesses a certificate without a value.\nProcesses a timeout certificate.\nProcesses a validated certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the missing <code>Blob</code>s. by their ids.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nSubscribes to receiving notifications for a collection of …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA <code>Notifier</code> holds references to clients waiting to receive …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNotifies all the clients waiting for a notification from a …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCreates a subscription given a collection of ChainIds and …\nCreates a subscription given a collection of ChainIds and …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA validator node together with the validator’s name.\nChecks that requesting these blobs when trying to handle …\nDownloads the blobs with the given IDs. This is done in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nCreates the root chain with the given <code>index</code>, and returns a …\nObtains the basic <code>ChainInfo</code> data for the local validator …\nTries to find a (confirmation) certificate for the given …\nTries to find a (confirmation) certificate for the given …\nPanics if any validator has a nonempty outbox for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ServiceStorage</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCreates a <code>RocksDbStorageBuilder</code> that uses the specified …\nCreates a <code>MemoryStorageBuilder</code> that uses the specified …\nCreates a <code>ServiceStorage</code> with the given Wasm runtime.\nCreates a <code>DynamoDbStorageBuilder</code> that uses the specified …\nCreates a <code>ScyllaDbStorageBuilder</code> that uses the specified …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nInstruct the networking layer to send cross-chain requests …\nNotification that a chain has a new certified block or a …\nReason for the notification.\nError type for worker operations..\nState of a worker in a validator or a local node.\nReturns a read-only view of the <code>ChainStateView</code> of a chain …\nThe cross-chain requests\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProcesses a confirmed block certificate.\nProcesses a certificate, e.g. to extend a chain with a …\nProcesses a timeout certificate\nProcesses a validated block certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe push notifications.\nGets a reference to the validator’s <code>PublicKey</code>.\nExecutes a <code>Query</code> for an application’s state on a …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReturns a stored <code>ConfirmedBlockCertificate</code> for a chain’s …\nTries to execute a block proposal without any verification …\nReturns the storage client so that it can be manipulated …\nUpdates the received certificate trackers to at least the …\nReturns an instance with the specified grace period, in …\nConfigures the subset of chains that this worker is …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")