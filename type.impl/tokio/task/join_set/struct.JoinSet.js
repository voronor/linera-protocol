(function() {var type_impls = {
"linera_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-JoinSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#590\">source</a><a href=\"#impl-Debug-for-JoinSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#591\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","linera_core::join_set_ext::implementation::JoinSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-JoinSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#596\">source</a><a href=\"#impl-Default-for-JoinSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#597\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","linera_core::join_set_ext::implementation::JoinSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-JoinSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#584\">source</a><a href=\"#impl-Drop-for-JoinSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#585\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","linera_core::join_set_ext::implementation::JoinSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CF%3E-for-JoinSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#630-634\">source</a><a href=\"#impl-FromIterator%3CF%3E-for-JoinSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;F&gt; for <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h3></section></summary><div class=\"docblock\"><p>Collect an iterator of futures into a <a href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\"><code>JoinSet</code></a>.</p>\n<p>This is equivalent to calling <a href=\"tokio/task/join_set/struct.JoinSet.html#method.spawn\" title=\"method tokio::task::join_set::JoinSet::spawn\"><code>JoinSet::spawn</code></a> on each element of the iterator.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>The main example from <a href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\"><code>JoinSet</code></a>’s documentation can also be written using <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>collect</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::task::JoinSet;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: JoinSet&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"number\">10</span>).map(|i| <span class=\"kw\">async move </span>{ i }).collect();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>seen = [<span class=\"bool-val\">false</span>; <span class=\"number\">10</span>];\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(res) = set.join_next().<span class=\"kw\">await </span>{\n        <span class=\"kw\">let </span>idx = res.unwrap();\n        seen[idx] = <span class=\"bool-val\">true</span>;\n    }\n\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n        <span class=\"macro\">assert!</span>(seen[i]);\n    }\n}</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#636\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = F&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<F>","linera_core::join_set_ext::implementation::JoinSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JoinSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#71\">source</a><a href=\"#impl-JoinSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#73\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new <code>JoinSet</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#80\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of tasks currently in the <code>JoinSet</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#85\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the <code>JoinSet</code> is empty.</p>\n</div></details></div></details>",0,"linera_core::join_set_ext::implementation::JoinSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JoinSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#90\">source</a><a href=\"#impl-JoinSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"tokio/task/join_set/struct.JoinSet.html\" title=\"struct tokio::task::join_set::JoinSet\">JoinSet</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#133-137\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.spawn\" class=\"fn\">spawn</a>&lt;F&gt;(&amp;mut self, task: F) -&gt; <a class=\"struct\" href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\">AbortHandle</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class=\"docblock\"><p>Spawn the provided task on the <code>JoinSet</code>, returning an <a href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\"><code>AbortHandle</code></a>\nthat can be used to remotely cancel the task.</p>\n<p>The provided future will start running in the background immediately\nwhen this method is called, even if you don’t await anything on this\n<code>JoinSet</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This method panics if called outside of a Tokio runtime.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_on\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#152-156\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.spawn_on\" class=\"fn\">spawn_on</a>&lt;F&gt;(&amp;mut self, task: F, handle: &amp;<a class=\"struct\" href=\"tokio/runtime/handle/struct.Handle.html\" title=\"struct tokio::runtime::handle::Handle\">Handle</a>) -&gt; <a class=\"struct\" href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\">AbortHandle</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class=\"docblock\"><p>Spawn the provided task on the provided runtime and store it in this\n<code>JoinSet</code> returning an <a href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\"><code>AbortHandle</code></a> that can be used to remotely\ncancel the task.</p>\n<p>The provided future will start running in the background immediately\nwhen this method is called, even if you don’t await anything on this\n<code>JoinSet</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_local\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#176-179\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.spawn_local\" class=\"fn\">spawn_local</a>&lt;F&gt;(&amp;mut self, task: F) -&gt; <a class=\"struct\" href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\">AbortHandle</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Spawn the provided task on the current <a href=\"tokio/task/local/struct.LocalSet.html\" title=\"struct tokio::task::local::LocalSet\"><code>LocalSet</code></a> and store it in this\n<code>JoinSet</code>, returning an <a href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\"><code>AbortHandle</code></a> that can be used to remotely\ncancel the task.</p>\n<p>The provided future will start running in the background immediately\nwhen this method is called, even if you don’t await anything on this\n<code>JoinSet</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This method panics if it is called outside of a <code>LocalSet</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_local_on\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#196-199\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.spawn_local_on\" class=\"fn\">spawn_local_on</a>&lt;F&gt;(\n    &amp;mut self,\n    task: F,\n    local_set: &amp;<a class=\"struct\" href=\"tokio/task/local/struct.LocalSet.html\" title=\"struct tokio::task::local::LocalSet\">LocalSet</a>,\n) -&gt; <a class=\"struct\" href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\">AbortHandle</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Spawn the provided task on the provided <a href=\"tokio/task/local/struct.LocalSet.html\" title=\"struct tokio::task::local::LocalSet\"><code>LocalSet</code></a> and store it in\nthis <code>JoinSet</code>, returning an <a href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\"><code>AbortHandle</code></a> that can be used to\nremotely cancel the task.</p>\n<p>Unlike the <a href=\"tokio/task/join_set/struct.JoinSet.html#method.spawn_local\" title=\"method tokio::task::join_set::JoinSet::spawn_local\"><code>spawn_local</code></a> method, this method may be used to spawn local\ntasks on a <code>LocalSet</code> that is <em>not</em> currently running. The provided\nfuture will start running whenever the <code>LocalSet</code> is next started.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_blocking\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#241-245\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.spawn_blocking\" class=\"fn\">spawn_blocking</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"struct\" href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\">AbortHandle</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class=\"docblock\"><p>Spawn the blocking code on the blocking threadpool and store\nit in this <code>JoinSet</code>, returning an <a href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\"><code>AbortHandle</code></a> that can be\nused to remotely cancel the task.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Spawn multiple blocking tasks and wait for them.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::task::JoinSet;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = JoinSet::new();\n\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n        set.spawn_blocking(<span class=\"kw\">move </span>|| { i });\n    }\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>seen = [<span class=\"bool-val\">false</span>; <span class=\"number\">10</span>];\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(res) = set.join_next().<span class=\"kw\">await </span>{\n        <span class=\"kw\">let </span>idx = res.unwrap();\n        seen[idx] = <span class=\"bool-val\">true</span>;\n    }\n\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n        <span class=\"macro\">assert!</span>(seen[i]);\n    }\n}</code></pre></div>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>This method panics if called outside of a Tokio runtime.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_blocking_on\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#256-260\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.spawn_blocking_on\" class=\"fn\">spawn_blocking_on</a>&lt;F&gt;(&amp;mut self, f: F, handle: &amp;<a class=\"struct\" href=\"tokio/runtime/handle/struct.Handle.html\" title=\"struct tokio::runtime::handle::Handle\">Handle</a>) -&gt; <a class=\"struct\" href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\">AbortHandle</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class=\"docblock\"><p>Spawn the blocking code on the blocking threadpool of the\nprovided runtime and store it in this <code>JoinSet</code>, returning an\n<a href=\"linera_core/join_set_ext/struct.AbortHandle.html\" title=\"struct linera_core::join_set_ext::AbortHandle\"><code>AbortHandle</code></a> that can be used to remotely cancel the task.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join_next\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#283\">source</a><h4 class=\"code-header\">pub async fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.join_next\" class=\"fn\">join_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"tokio/runtime/task/error/struct.JoinError.html\" title=\"struct tokio::runtime::task::error::JoinError\">JoinError</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Waits until one of the tasks in the set completes and returns its output.</p>\n<p>Returns <code>None</code> if the set is empty.</p>\n<h5 id=\"cancel-safety\"><a class=\"doc-anchor\" href=\"#cancel-safety\">§</a>Cancel Safety</h5>\n<p>This method is cancel safe. If <code>join_next</code> is used as the event in a <code>tokio::select!</code>\nstatement and some other branch completes first, it is guaranteed that no tasks were\nremoved from this <code>JoinSet</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_join_next\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#312\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.try_join_next\" class=\"fn\">try_join_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"tokio/runtime/task/error/struct.JoinError.html\" title=\"struct tokio::runtime::task::error::JoinError\">JoinError</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to join one of the tasks in the set that has completed and return its output.</p>\n<p>Returns <code>None</code> if there are no completed tasks, or if the set is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shutdown\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#372\">source</a><h4 class=\"code-header\">pub async fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.shutdown\" class=\"fn\">shutdown</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Aborts all tasks and waits for them to finish shutting down.</p>\n<p>Calling this method is equivalent to calling <a href=\"tokio/task/join_set/struct.JoinSet.html#method.abort_all\" title=\"method tokio::task::join_set::JoinSet::abort_all\"><code>abort_all</code></a> and then calling <a href=\"tokio/task/join_set/struct.JoinSet.html#method.join_next\" title=\"method tokio::task::join_set::JoinSet::join_next\"><code>join_next</code></a> in\na loop until it returns <code>None</code>.</p>\n<p>This method ignores any panics in the tasks shutting down. When this call returns, the\n<code>JoinSet</code> will be empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join_all\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#437\">source</a><h4 class=\"code-header\">pub async fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.join_all\" class=\"fn\">join_all</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Awaits the completion of all tasks in this <code>JoinSet</code>, returning a vector of their results.</p>\n<p>The results will be stored in the order they completed not the order they were spawned.\nThis is a convenience method that is equivalent to calling <a href=\"tokio/task/join_set/struct.JoinSet.html#method.join_next\" title=\"method tokio::task::join_set::JoinSet::join_next\"><code>join_next</code></a> in\na loop. If any tasks on the <code>JoinSet</code> fail with an <a href=\"tokio/runtime/task/error/struct.JoinError.html\" title=\"struct tokio::runtime::task::error::JoinError\"><code>JoinError</code></a>, then this call\nto <code>join_all</code> will panic and all remaining tasks on the <code>JoinSet</code> are\ncancelled. To handle errors in any other way, manually call <a href=\"tokio/task/join_set/struct.JoinSet.html#method.join_next\" title=\"method tokio::task::join_set::JoinSet::join_next\"><code>join_next</code></a>\nin a loop.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Spawn multiple tasks and <code>join_all</code> them.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::task::JoinSet;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = JoinSet::new();\n\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">3 </span>{\n       set.spawn(<span class=\"kw\">async move </span>{\n           tokio::time::sleep(Duration::from_secs(<span class=\"number\">3 </span>- i)).<span class=\"kw\">await</span>;\n           i\n       });\n    }   \n\n    <span class=\"kw\">let </span>output = set.join_all().<span class=\"kw\">await</span>;  \n    <span class=\"macro\">assert_eq!</span>(output, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n}</code></pre></div>\n<p>Equivalent implementation of <code>join_all</code>, using <a href=\"tokio/task/join_set/struct.JoinSet.html#method.join_next\" title=\"method tokio::task::join_set::JoinSet::join_next\"><code>join_next</code></a> and loop.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::task::JoinSet;\n<span class=\"kw\">use </span>std::panic;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = JoinSet::new();\n\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">3 </span>{\n       set.spawn(<span class=\"kw\">async move </span>{i});\n    }   \n     \n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(res) = set.join_next().<span class=\"kw\">await</span>{\n        <span class=\"kw\">match </span>res {\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; output.push(t),\n            <span class=\"prelude-val\">Err</span>(err) <span class=\"kw\">if </span>err.is_panic() =&gt; panic::resume_unwind(err.into_panic()),\n            <span class=\"prelude-val\">Err</span>(err) =&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"{err}\"</span>),\n        }\n    }\n    <span class=\"macro\">assert_eq!</span>(output.len(),<span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abort_all\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#454\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.abort_all\" class=\"fn\">abort_all</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Aborts all tasks on this <code>JoinSet</code>.</p>\n<p>This does not remove the tasks from the <code>JoinSet</code>. To wait for the tasks to complete\ncancellation, you should call <code>join_next</code> in a loop until the <code>JoinSet</code> is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.detach_all\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#462\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.detach_all\" class=\"fn\">detach_all</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all tasks from this <code>JoinSet</code> without aborting them.</p>\n<p>The tasks removed by this call will continue to run in the background even if the <code>JoinSet</code>\nis dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_join_next\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/task/join_set.rs.html#491\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/task/join_set/struct.JoinSet.html#tymethod.poll_join_next\" class=\"fn\">poll_join_next</a>(\n    &amp;mut self,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"tokio/runtime/task/error/struct.JoinError.html\" title=\"struct tokio::runtime::task::error::JoinError\">JoinError</a>&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Polls for one of the tasks in the set to complete.</p>\n<p>If this returns <code>Poll::Ready(Some(_))</code>, then the task that completed is removed from the set.</p>\n<p>When the method returns <code>Poll::Pending</code>, the <code>Waker</code> in the provided <code>Context</code> is scheduled\nto receive a wakeup when a task in the <code>JoinSet</code> completes. Note that on multiple calls to\n<code>poll_join_next</code>, only the <code>Waker</code> from the <code>Context</code> passed to the most recent call is\nscheduled to receive a wakeup.</p>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>This function returns:</p>\n<ul>\n<li><code>Poll::Pending</code> if the <code>JoinSet</code> is not empty but there is no task whose output is\navailable right now.</li>\n<li><code>Poll::Ready(Some(Ok(value)))</code> if one of the tasks in this <code>JoinSet</code> has completed.\nThe <code>value</code> is the return value of one of the tasks that completed.</li>\n<li><code>Poll::Ready(Some(Err(err)))</code> if one of the tasks in this <code>JoinSet</code> has panicked or been\naborted. The <code>err</code> is the <code>JoinError</code> from the panicked/aborted task.</li>\n<li><code>Poll::Ready(None)</code> if the <code>JoinSet</code> is empty.</li>\n</ul>\n<p>Note that this method may return <code>Poll::Pending</code> even if one of the tasks has completed.\nThis can happen if the <a href=\"tokio/task/index.html#cooperative-scheduling\" title=\"mod tokio::task\">coop budget</a> is reached.</p>\n</div></details></div></details>",0,"linera_core::join_set_ext::implementation::JoinSet"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()